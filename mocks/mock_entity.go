// Code generated by MockGen. DO NOT EDIT.
// Source: runtime/entity/entity.go
//
// Generated by this command:
//
//	mockgen -source=runtime/entity/entity.go -destination=mocks/mock_entity.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEntity is a mock of Entity interface.
type MockEntity struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMockRecorder
	isgomock struct{}
}

// MockEntityMockRecorder is the mock recorder for MockEntity.
type MockEntityMockRecorder struct {
	mock *MockEntity
}

// NewMockEntity creates a new mock instance.
func NewMockEntity(ctrl *gomock.Controller) *MockEntity {
	mock := &MockEntity{ctrl: ctrl}
	mock.recorder = &MockEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntity) EXPECT() *MockEntityMockRecorder {
	return m.recorder
}

// GetLatestOperationID mocks base method.
func (m *MockEntity) GetLatestOperationID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestOperationID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLatestOperationID indicates an expected call of GetLatestOperationID.
func (mr *MockEntityMockRecorder) GetLatestOperationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestOperationID", reflect.TypeOf((*MockEntity)(nil).GetLatestOperationID))
}
