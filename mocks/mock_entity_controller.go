// Code generated by MockGen. DO NOT EDIT.
// Source: runtime/entity_controller/entity_controller.go
//
// Generated by this command:
//
//	mockgen -source=runtime/entity_controller/entity_controller.go -destination=mocks/mock_entity_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Azure/aks-async/runtime/entity"
	errors "github.com/Azure/aks-async/runtime/errors"
	operation "github.com/Azure/aks-async/runtime/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockEntityController is a mock of EntityController interface.
type MockEntityController struct {
	ctrl     *gomock.Controller
	recorder *MockEntityControllerMockRecorder
	isgomock struct{}
}

// MockEntityControllerMockRecorder is the mock recorder for MockEntityController.
type MockEntityControllerMockRecorder struct {
	mock *MockEntityController
}

// NewMockEntityController creates a new mock instance.
func NewMockEntityController(ctrl *gomock.Controller) *MockEntityController {
	mock := &MockEntityController{ctrl: ctrl}
	mock.recorder = &MockEntityControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityController) EXPECT() *MockEntityControllerMockRecorder {
	return m.recorder
}

// GetEntity mocks base method.
func (m *MockEntityController) GetEntity(arg0 context.Context, arg1 *operation.OperationRequest) (entity.Entity, *errors.AsyncError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", arg0, arg1)
	ret0, _ := ret[0].(entity.Entity)
	ret1, _ := ret[1].(*errors.AsyncError)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockEntityControllerMockRecorder) GetEntity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntityController)(nil).GetEntity), arg0, arg1)
}
