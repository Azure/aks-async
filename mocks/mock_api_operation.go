// Code generated by MockGen. DO NOT EDIT.
// Source: runtime/operation/api_operation.go
//
// Generated by this command:
//
//	mockgen -source=runtime/operation/api_operation.go -destination=mocks/mock_api_operation.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Azure/aks-async/runtime/entity"
	errors "github.com/Azure/aks-async/runtime/errors"
	operation "github.com/Azure/aks-async/runtime/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockApiOperation is a mock of ApiOperation interface.
type MockApiOperation struct {
	ctrl     *gomock.Controller
	recorder *MockApiOperationMockRecorder
	isgomock struct{}
}

// MockApiOperationMockRecorder is the mock recorder for MockApiOperation.
type MockApiOperationMockRecorder struct {
	mock *MockApiOperation
}

// NewMockApiOperation creates a new mock instance.
func NewMockApiOperation(ctrl *gomock.Controller) *MockApiOperation {
	mock := &MockApiOperation{ctrl: ctrl}
	mock.recorder = &MockApiOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiOperation) EXPECT() *MockApiOperationMockRecorder {
	return m.recorder
}

// GetOperationRequest mocks base method.
func (m *MockApiOperation) GetOperationRequest() *operation.OperationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationRequest")
	ret0, _ := ret[0].(*operation.OperationRequest)
	return ret0
}

// GetOperationRequest indicates an expected call of GetOperationRequest.
func (mr *MockApiOperationMockRecorder) GetOperationRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationRequest", reflect.TypeOf((*MockApiOperation)(nil).GetOperationRequest))
}

// GuardConcurrency mocks base method.
func (m *MockApiOperation) GuardConcurrency(arg0 context.Context, arg1 entity.Entity) *errors.AsyncError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuardConcurrency", arg0, arg1)
	ret0, _ := ret[0].(*errors.AsyncError)
	return ret0
}

// GuardConcurrency indicates an expected call of GuardConcurrency.
func (mr *MockApiOperationMockRecorder) GuardConcurrency(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuardConcurrency", reflect.TypeOf((*MockApiOperation)(nil).GuardConcurrency), arg0, arg1)
}

// InitOperation mocks base method.
func (m *MockApiOperation) InitOperation(arg0 context.Context, arg1 *operation.OperationRequest) (operation.ApiOperation, *errors.AsyncError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitOperation", arg0, arg1)
	ret0, _ := ret[0].(operation.ApiOperation)
	ret1, _ := ret[1].(*errors.AsyncError)
	return ret0, ret1
}

// InitOperation indicates an expected call of InitOperation.
func (mr *MockApiOperationMockRecorder) InitOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOperation", reflect.TypeOf((*MockApiOperation)(nil).InitOperation), arg0, arg1)
}

// Run mocks base method.
func (m *MockApiOperation) Run(arg0 context.Context) *errors.AsyncError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(*errors.AsyncError)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockApiOperationMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApiOperation)(nil).Run), arg0)
}
